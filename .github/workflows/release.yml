name: Release

on:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build:
    name: Build and Upload Release Assets
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: p2p-play
            asset_name: p2p-play-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: p2p-play.exe
            asset_name: p2p-play-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: p2p-play
            asset_name: p2p-play-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: p2p-play
            asset_name: p2p-play-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: |
        if [ -f "./scripts/test_runner.sh" ]; then
          chmod +x ./scripts/test_runner.sh
          ./scripts/test_runner.sh
        else
          cargo test
        fi
      shell: bash

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare artifact (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
        strip ${{ matrix.asset_name }} || true

    - name: Prepare artifact (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} ${{ matrix.asset_name }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream
